#!/bin/sh

ScriptName=${0}
BaseName=$(basename ${ScriptName})
DirName=$(dirname $(readlink -f ${ScriptName}))
CommandName="${DirName}/${BaseName}3.py"

SYSTEMCTL="${DirName}/systemctl3.py"
LOGFILE="$PREFIX/var/log/journal/systemd-journald.service.log"

no_sudo_commands="-h --help --version cat command default-services \
                   environment get-default get-preset help is-enabled \
                   list-dependencies list-start-dependencies list-unit-files \
                   listen log"

out() { printf "$1 $2\n" "${@:3}"; }
error() { out "$@"; } >&2
msg() { out "==>" "$@"; }
msg2() { out "  ->" "$@";}
die() { error "$@"; exit 1; }

ignore_error() {
  "$@" 2>/dev/null
  return 0
}

sv_service(){
  cat <<EOF
[Unit]
Description=Sv Service (%N)

[Service]
Type=simple
PIDFile=/var/run/%N.pid
ExecStart=/usr/bin/sv start %N
ExecStop=/usr/bin/sv stop %N
ExecReload=/usr/bin/sv reload %N
PrivateTmp=true

[Install]
WantedBy=multi-user.target
EOF
}

mklinksv(){
  [ ! -x $PREFIX/bin/sv ] && return 0
  for service in $PREFIX/var/service/*/ ;do
    service=$(basename ${service})
    ignore_error sv_service > "$PREFIX/lib/systemd/system/$service.service"
    [ -e "../sv/$service/current" ] && ln -sf "../sv/$service/current" "$PREFIX/var/log/journal/$service.service.log"
  done
}

log_msg(){
  echo "$(date +'%b %d %T') $(hostname) $(basename ${0})[$$]: ${@}"
}

log_msg_run(){
  log_msg ${@}
  ${@}
}

sudo_systemctl(){
  if [ "$(id -u)" -eq 0 ] || [ -n "${TERMUX_VERSION}" ] ; then
    command=${SYSTEMCTL}
  elif which_sudo="$(which sudo)" ; then
    command="${which_sudo} ${SYSTEMCTL}"
  else
    error "\033[0;31mFailed to ${@}: Interactive authentication required.\033[0m"
    command=${SYSTEMCTL}
  fi
}

systemctl() {
  [ -z "$1" ] && sudo_systemctl "$@"
  case "$no_sudo_commands" in
  *"$1 "*|*" $1"*)
    ;;
  *)
    sudo_systemctl "$@"
    ;;
  esac
  control "$@"
}

control(){
  [ -z "$command" ] && command=${CommandName}
  [ ! -x /usr/bin/python3 ] && command="termux-chroot ${command}"
  exec $command ${@}
}

init(){
  log_msg_run mount -a -v
  systemctl init
}

umount_a(){
  log_msg Umounting all filesystems mentioned in fstab
  tac /etc/fstab | while read line; do
    if [ "$(echo "$line" | cut -c1)" != "#" ]; then
      dest=$(echo "$line" | awk '{print $2}')
      [ -e "$dest" ] && [ -n "$dest" ] && log_msg_run umount -lr "$dest"
    fi
  done
  mount -a -v
  log_msg Umounted all filesystems mentioned in fstab
}

halt(){
  # log_msg_run umount_a
  systemctl halt
}

mklinksv

case ${BaseName} in
  journalctl)
    control ${@}
    ;;
  init)
    init
    ;;
  halt)
    halt
    ;;
  reboot)
    halt&&init
    ;;
  *)
    # die "${BaseName}: applet not found"
    systemctl ${@}
    ;;
esac
